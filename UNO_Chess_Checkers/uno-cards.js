// –ö–∞—Ä—Ç—ã –£–ù–û –¥–ª—è –∏–≥—Ä—ã Zortum
class UNOCards {
    constructor() {
        this.cards = this.initializeCards();
        this.player1Deck = [];
        this.player2Deck = [];
        this.discardPile = [];
    }

    initializeCards() {
        const cards = [];
        
        // –û–±—ã—á–Ω—ã–µ –∫–∞—Ä—Ç—ã (0-9) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞
        const colors = ['red', 'blue', 'green', 'yellow'];
        const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
        
        colors.forEach(color => {
            numbers.forEach(number => {
                // –ù–æ–ª—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞ –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞
                const count = number === 0 ? 1 : 2;
                for (let i = 0; i < count; i++) {
                    cards.push({
                        type: 'number',
                        value: number,
                        color: color,
                        effect: this.getNumberEffect(number)
                    });
                }
            });
        });

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã
        const specialCards = [
            { type: 'skip', color: 'red', effect: '–ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞' },
            { type: 'skip', color: 'blue', effect: '–ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞' },
            { type: 'skip', color: 'green', effect: '–ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞' },
            { type: 'skip', color: 'yellow', effect: '–ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞' },
            
            { type: 'reverse', color: 'red', effect: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–æ–¥–æ–≤' },
            { type: 'reverse', color: 'blue', effect: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–æ–¥–æ–≤' },
            { type: 'reverse', color: 'green', effect: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–æ–¥–æ–≤' },
            { type: 'reverse', color: 'yellow', effect: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–æ–¥–æ–≤' },
            
            { type: 'draw2', color: 'red', effect: '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –±–µ—Ä–µ—Ç 2 –∫–∞—Ä—Ç—ã –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥' },
            { type: 'draw2', color: 'blue', effect: '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –±–µ—Ä–µ—Ç 2 –∫–∞—Ä—Ç—ã –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥' },
            { type: 'draw2', color: 'green', effect: '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –±–µ—Ä–µ—Ç 2 –∫–∞—Ä—Ç—ã –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥' },
            { type: 'draw2', color: 'yellow', effect: '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –±–µ—Ä–µ—Ç 2 –∫–∞—Ä—Ç—ã –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥' },
            
            { type: 'wild', color: 'black', effect: '–°–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ö–æ–¥' },
            { type: 'wild', color: 'black', effect: '–°–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ö–æ–¥' },
            { type: 'wild', color: 'black', effect: '–°–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ö–æ–¥' },
            { type: 'wild', color: 'black', effect: '–°–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ö–æ–¥' },
            
            { type: 'wild4', color: 'black', effect: '–°–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞, –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –±–µ—Ä–µ—Ç 4 –∫–∞—Ä—Ç—ã –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥' },
            { type: 'wild4', color: 'black', effect: '–°–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞, –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –±–µ—Ä–µ—Ç 4 –∫–∞—Ä—Ç—ã –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥' },
            { type: 'wild4', color: 'black', effect: '–°–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞, –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –±–µ—Ä–µ—Ç 4 –∫–∞—Ä—Ç—ã –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥' },
            { type: 'wild4', color: 'black', effect: '–°–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞, –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –±–µ—Ä–µ—Ç 4 –∫–∞—Ä—Ç—ã –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥' },
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è Zortum
            { type: 'flip', color: 'purple', effect: '–ò–≥—Ä–æ–∫–∏ –º–µ–Ω—è—é—Ç—Å—è —Å—Ç–æ—Ä–æ–Ω–∞–º–∏' },
            { type: 'flip', color: 'purple', effect: '–ò–≥—Ä–æ–∫–∏ –º–µ–Ω—è—é—Ç—Å—è —Å—Ç–æ—Ä–æ–Ω–∞–º–∏' },
            
            { type: 'teleport', color: 'cyan', effect: '–¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ñ–∏–≥—É—Ä—ã' },
            { type: 'teleport', color: 'cyan', effect: '–¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ñ–∏–≥—É—Ä—ã' },
            
            { type: 'shield', color: 'silver', effect: '–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∑—è—Ç–∏—è' },
            { type: 'shield', color: 'silver', effect: '–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∑—è—Ç–∏—è' },
            
            { type: 'double_move', color: 'gold', effect: '–î–≤–æ–π–Ω–æ–π —Ö–æ–¥' },
            { type: 'double_move', color: 'gold', effect: '–î–≤–æ–π–Ω–æ–π —Ö–æ–¥' }
        ];

        specialCards.forEach(card => {
            cards.push(card);
        });

        return cards;
    }

    getNumberEffect(number) {
        const effects = {
            0: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ö–æ–¥',
            1: '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞ 1 –∫–ª–µ—Ç–∫—É –≤ –ª—é–±–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏',
            2: '–î–≤–æ–π–Ω–æ–π —Ö–æ–¥',
            3: '–¢—Ä–æ–π–Ω–æ–π —Ö–æ–¥',
            4: '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞ 4 –∫–ª–µ—Ç–∫–∏ –ø–æ –ø—Ä—è–º–æ–π',
            5: '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞ 5 –∫–ª–µ—Ç–æ–∫ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏',
            6: '–ë—Ä–æ—Å–æ–∫ D6 –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ö–æ–¥–æ–≤',
            7: '–°—á–∞—Å—Ç–ª–∏–≤–∞—è —Å–µ–º–µ—Ä–∫–∞ - –æ—Å–æ–±—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
            8: '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–µ –≤–æ—Å—å–º–µ—Ä–∫–∏',
            9: '–î–µ–≤—è—Ç–∫–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞'
        };
        return effects[number] || '–û–±—ã—á–Ω—ã–π —Ö–æ–¥';
    }

    shuffleDeck() {
        const shuffled = [...this.cards];
        for (let i = shuffled.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
        }
        return shuffled;
    }

    dealCards() {
        const shuffled = this.shuffleDeck();
        
        // –†–∞–∑–¥–∞–µ–º –ø–æ 7 –∫–∞—Ä—Ç –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
        this.player1Deck = shuffled.slice(0, 7);
        this.player2Deck = shuffled.slice(7, 14);
        
        // –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –≤ —Å–±—Ä–æ—Å
        this.discardPile = [shuffled[14]];
        
        return {
            player1: this.player1Deck,
            player2: this.player2Deck,
            topCard: this.discardPile[0]
        };
    }

    drawCard(player) {
        if (this.cards.length === 0) {
            this.reshuffleDiscardPile();
        }
        
        const card = this.cards.pop();
        if (player === 1) {
            this.player1Deck.push(card);
        } else {
            this.player2Deck.push(card);
        }
        
        return card;
    }

    playCard(player, cardIndex) {
        const deck = player === 1 ? this.player1Deck : this.player2Deck;
        const card = deck[cardIndex];
        
        if (card) {
            deck.splice(cardIndex, 1);
            this.discardPile.push(card);
            return card;
        }
        return null;
    }

    reshuffleDiscardPile() {
        const topCard = this.discardPile.pop();
        this.cards = this.shuffleDeck();
        this.discardPile = [topCard];
    }

    getCardDisplay(card) {
        if (card.type === 'number') {
            return card.value.toString();
        } else if (card.type === 'skip') {
            return '‚è≠Ô∏è';
        } else if (card.type === 'reverse') {
            return 'üîÑ';
        } else if (card.type === 'draw2') {
            return '+2';
        } else if (card.type === 'wild') {
            return 'üåà';
        } else if (card.type === 'wild4') {
            return '+4';
        } else if (card.type === 'flip') {
            return 'üîÑ';

        } else if (card.type === 'teleport') {
            return 'üöÄ';
        } else if (card.type === 'shield') {
            return 'üõ°Ô∏è';
        } else if (card.type === 'double_move') {
            return '‚ö°';
        }
        return '?';
    }

    getCardColor(card) {
        return card.color;
    }

    canPlayCard(card, topCard) {
        if (card.type === 'wild' || card.type === 'wild4') {
            return true;
        }
        
        if (card.color === topCard.color) {
            return true;
        }
        
        if (card.type === topCard.type && card.type !== 'number') {
            return true;
        }
        
        if (card.type === 'number' && topCard.type === 'number' && card.value === topCard.value) {
            return true;
        }
        
        return false;
    }

    applyCardEffect(card, game) {
        switch (card.type) {
            case 'number':
                return this.applyNumberEffect(card, game);
            case 'skip':
                return this.applySkipEffect(card, game);
            case 'reverse':
                return this.applyReverseEffect(card, game);
            case 'draw2':
                return this.applyDraw2Effect(card, game);
            case 'wild':
                return this.applyWildEffect(card, game);
            case 'wild4':
                return this.applyWild4Effect(card, game);
            case 'flip':
                return this.applyFlipEffect(card, game);

            case 'teleport':
                return this.applyTeleportEffect(card, game);
            case 'shield':
                return this.applyShieldEffect(card, game);
            case 'double_move':
                return this.applyDoubleMoveEffect(card, game);
            default:
                return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –∫–∞—Ä—Ç—ã';
        }
    }

    applyNumberEffect(card, game) {
        const effects = {
            0: () => { game.addLogEntry(game.currentPlayer, '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ö–æ–¥!'); },
            1: () => { game.addLogEntry(game.currentPlayer, '–ú–æ–∂–Ω–æ —Ö–æ–¥–∏—Ç—å –Ω–∞ 1 –∫–ª–µ—Ç–∫—É –≤ –ª—é–±–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏'); },
            2: () => { game.addLogEntry(game.currentPlayer, '–î–≤–æ–π–Ω–æ–π —Ö–æ–¥!'); },
            3: () => { game.addLogEntry(game.currentPlayer, '–¢—Ä–æ–π–Ω–æ–π —Ö–æ–¥!'); },
            4: () => { game.addLogEntry(game.currentPlayer, '–ú–æ–∂–Ω–æ —Ö–æ–¥–∏—Ç—å –Ω–∞ 4 –∫–ª–µ—Ç–∫–∏ –ø–æ –ø—Ä—è–º–æ–π'); },
            5: () => { game.addLogEntry(game.currentPlayer, '–ú–æ–∂–Ω–æ —Ö–æ–¥–∏—Ç—å –Ω–∞ 5 –∫–ª–µ—Ç–æ–∫ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏'); },
            6: () => { game.rollDice(6); },
            7: () => { game.addLogEntry(game.currentPlayer, '–°—á–∞—Å—Ç–ª–∏–≤–∞—è —Å–µ–º–µ—Ä–∫–∞! –û—Å–æ–±—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã'); },
            8: () => { game.addLogEntry(game.currentPlayer, '–•–æ–¥ –≤ —Ñ–æ—Ä–º–µ –≤–æ—Å—å–º–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω'); },
            9: () => { game.addLogEntry(game.currentPlayer, '–î–µ–≤—è—Ç–∫–∞! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'); }
        };
        
        if (effects[card.value]) {
            effects[card.value]();
        }
    }

    applySkipEffect(card, game) {
        game.addLogEntry(game.currentPlayer, '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥!');
        game.currentPlayer = game.currentPlayer === 1 ? 2 : 1;
        game.currentPlayer = game.currentPlayer === 1 ? 2 : 1; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ö–æ–¥
    }

    applyReverseEffect(card, game) {
        game.addLogEntry(game.currentPlayer, '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–æ–¥–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ!');
        // –õ–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    }

    applyDraw2Effect(card, game) {
        game.addLogEntry(game.currentPlayer, '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –±–µ—Ä–µ—Ç 2 –∫–∞—Ä—Ç—ã –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥!');
        // –î–æ–±–∞–≤–∏—Ç—å 2 –∫–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É
        game.currentPlayer = game.currentPlayer === 1 ? 2 : 1;
        game.currentPlayer = game.currentPlayer === 1 ? 2 : 1; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ö–æ–¥
    }

    applyWildEffect(card, game) {
        game.addLogEntry(game.currentPlayer, '–î–∏–∫–∞—è –∫–∞—Ä—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ü–≤–µ—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ö–æ–¥!');
        // –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
    }

    applyWild4Effect(card, game) {
        game.addLogEntry(game.currentPlayer, '–î–∏–∫–∞—è –∫–∞—Ä—Ç–∞ +4! –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –±–µ—Ä–µ—Ç 4 –∫–∞—Ä—Ç—ã –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥!');
        // –î–æ–±–∞–≤–∏—Ç—å 4 –∫–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É
        game.currentPlayer = game.currentPlayer === 1 ? 2 : 1;
        game.currentPlayer = game.currentPlayer === 1 ? 2 : 1; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ö–æ–¥
    }

    applyFlipEffect(card, game) {
        game.addLogEntry(game.currentPlayer, '–§–ª–∏–ø! –ò–≥—Ä–æ–∫–∏ –º–µ–Ω—è—é—Ç—Å—è —Å—Ç–æ—Ä–æ–Ω–∞–º–∏!');
        // –ú–µ–Ω—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –º–µ—Å—Ç–∞–º–∏
        game.swapPlayers();
    }

    applyTeleportEffect(card, game) {
        game.addLogEntry(game.currentPlayer, '–¢–µ–ª–µ–ø–æ—Ä—Ç! –°–ª—É—á–∞–π–Ω–∞—è —Ñ–∏–≥—É—Ä–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞!');
        // –õ–æ–≥–∏–∫–∞ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏
    }

    applyShieldEffect(card, game) {
        game.addLogEntry(game.currentPlayer, '–©–∏—Ç! –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∑—è—Ç–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!');
        // –õ–æ–≥–∏–∫–∞ –∑–∞—â–∏—Ç—ã
    }

    applyDoubleMoveEffect(card, game) {
        game.addLogEntry(game.currentPlayer, '–î–≤–æ–π–Ω–æ–π —Ö–æ–¥!');
        // –õ–æ–≥–∏–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ —Ö–æ–¥–∞
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ
if (typeof module !== 'undefined' && module.exports) {
    module.exports = UNOCards;
} 